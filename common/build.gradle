plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.8'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.common'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //application.yml 파일의 값을 읽어와서 멤버변수에 자동으로 할당한다.
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    /*
    api가 아닌 implementation로 선언하면
    dev.be.moduleapi.service.DemoService.memberRepository가 JpaRepository의 메소드를 사용하지 못한다.
    */

    /*
    api 키워드를 사용하기 위해선 2가지 중 1가지 방법으로 선언을 해야 한다.

    1. api를 사용하려는 build.gradle의 plugins에 `id 'java-library'` 추가
    2. 상위 모듈(=root)에서 'java-library' 추가
    ex) subprojects {
            apply plugin: 'java-library'
        }
     */
//    api 'org.springframework.boot:spring-boot-starter-data-jpa' // api 키워드 사용 다른 모듈에서 접근할 수 있음

}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register("prepareKotlinBuildScriptModel") {}// implementation project 후 에러나서 설정

tasks.bootJar { enabled = false} // 기본값 true xxx.jar파일 생성된다. common은 필요없음
tasks.jar {enabled = true} //  기본값 true xxx.plain.jar 생성된다.